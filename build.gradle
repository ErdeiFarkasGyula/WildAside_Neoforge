plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.113'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "neoforgedReleases"
        url = "https://maven.minecraftforge.net"
    }
    maven {
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
// Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            clientData()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    compileOnly("mezz.jei:jei-1.21.9-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-1.21.9-neoforge:${jei_version}")

//    compileOnly("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-NEOFORGE")
//    runtimeOnly("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-NEOFORGE")

    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
    implementation("com.github.glitchfiend:TerraBlender-neoforge:1.21.9-${terrablender_version}")
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version          : minecraft_version,
                             minecraft_version_range    : minecraft_version_range,
                             neo_version                : neo_version,
                             neo_version_range          : neo_version_range,
                             loader_version_range       : loader_version_range,
                             jei_version                : jei_version,
                             terrablender_version       : terrablender_version,
                             terrablender_version_range : terrablender_version_range,
                             patchouli_version          : patchouli_version,
                             mod_id                     : mod_id,
                             mod_name                   : mod_name,
                             mod_license                : mod_license,
                             mod_version                : mod_version,
                             mod_authors                : mod_authors,
                             mod_description            : mod_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.jar {
    archiveBaseName.set("wildaside")
    archiveVersion.set(mod_version)
    archiveClassifier.set("neoforge-${minecraft_version}")
}