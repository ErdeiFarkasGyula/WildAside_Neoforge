plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.95'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "neoforgedReleases"
        url = "https://maven.minecraftforge.net"
    }
    maven {
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    compileOnly("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-NEOFORGE")
    runtimeOnly("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-NEOFORGE")

    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
    implementation("com.github.glitchfiend:TerraBlender-neoforge:${minecraft_version}-${terrablender_version}")
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version          : minecraft_version,
                             minecraft_version_range    : minecraft_version_range,
                             neo_version                : neo_version,
                             neo_version_range          : neo_version_range,
                             loader_version_range       : loader_version_range,
                             jei_version                : jei_version,
                             terrablender_version       : terrablender_version,
                             terrablender_version_range : terrablender_version_range,
                             patchouli_version          : patchouli_version,
                             mod_id                     : mod_id,
                             mod_name                   : mod_name,
                             mod_license                : mod_license,
                             mod_version                : mod_version,
                             mod_authors                : mod_authors,
                             mod_description            : mod_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.jar {
    archiveBaseName.set("wildaside")
    archiveVersion.set(mod_version)
    archiveClassifier.set("neoforge-mc${minecraft_version}")
}